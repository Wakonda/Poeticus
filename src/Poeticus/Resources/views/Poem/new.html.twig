{% extends generic_layout %}

{% block head_title %}{{ 'menu.left.Admin'|trans }} - {{ 'admin.index.Poem'|trans }}{% endblock %}
{% block main_title %}{{ 'menu.left.Admin'|trans }} - {{ 'admin.index.Poem'|trans }}{% endblock %}

{% block style_additional %}
	<link rel="stylesheet" type="text/css" href="{{ app.request_stack.currentrequest.basepath }}/js/jquery.ajax-combobox-master/dist/jquery.ajax-combobox.css" media="screen" />
	<link rel="stylesheet" type="text/css" href="{{ app.request_stack.currentrequest.basepath }}/js/redactor/css/redactor.css" />
{% endblock %}

{% block script_additional %}
	<script src="{{ app.request_stack.currentrequest.basepath }}/js/jquery.ajax-combobox-master/dist/jquery.ajax-combobox.js"></script>
	<script src="{{ app.request_stack.currentrequest.basepath }}/js/combobox.js"></script>
	<script src="{{ app.request_stack.currentrequest.basepath }}/js/redactor/redactor.min.js"></script>
	<script type="text/javascript">
		$(function()
		{
			$('.redactor').redactor({
				autoresize: false,
				minHeight: 300,
				buttons: ['html']
			});

			$('#poem_authorType').change(function()
			{
				if($(this).val() == "user")
				{
					$("tr.user_row").show();
					$("tr.biography_row").hide();
					$("select#poem_biography").val("");
				}
				else
				{
					$("tr.user_row").hide();
					$("tr.biography_row").show();
					$("select#poem_user").val("");
				}
			});
			$('#poem_authorType').change();
			
			$("input#poem_unknownReleasedDate").click(function()
			{
				if($(this).is(":checked"))
					$("#poem_releasedDate").val("");
			});
			$("input#poem_unknownReleasedDate").click();
			
			$("input#poem_releasedDate").keyup(function()
			{
				if($(this).val() != "")
					$("input#poem_unknownReleasedDate").prop('checked', false);
				else
					$("input#poem_unknownReleasedDate").prop('checked', true);
			});
			$("input#poem_releasedDate").keyup();
			
			$(document).on('change', "#{{ form.biography.vars.id }}", function()
			{
				$.ajax({
					type: "POST",
					url: "{{ path('list_selected_biography') }}",
					data: { "id" : $(this).val() },
					success: function(data)
					{
						if(data.country != "")
							$("td.poem-country").html('<img src="{{ app.request_stack.currentrequest.basepath }}/photo/country/'+ data.country.flag +'" class="flag" />' + ' ' + data.country.title);
						else
							$("td.poem-country").html("-");
						console.log(data.country);

						var collections = data.collections;

						$("#{{ form.collection.vars.id }} option").remove();
						$("#{{ form.collection.vars.id }}").append('<option value="">{{ 'main.field.ChooseAnOption'|trans }}</option>');
						$.each(collections, function(index, element)
						{
							$("#{{ form.collection.vars.id }}").append('<option value="'+ element.id +'">'+ element.title +'</option>');
						});
						{% set collection = app.request_stack.currentrequest.get('collectionId') %}
						{% if collection is not null %}
							$("#{{ form.collection.vars.id }}").val("{{ collection }}");
						{% endif %}
					}
				});
			});
			
			$("#{{ form.biography.vars.id }}").change();
			
			$("#{{ form.collection.vars.id }}").change(function()
			{
				$.ajax({
					type: "POST",
					url: "{{ path('list_selected_collection') }}",
					data: { "id" : $(this).val() },
					success: function(data)
					{
						$("#{{ form.releasedDate.vars.id }}").val(data.releasedDate);

						if(data.releasedDate != null)
							$('input#poem_unknownReleasedDate').attr('checked', false);
						else
							$('input#poem_unknownReleasedDate').attr('checked', true);
					}
				});
			});
			
			$("#{{ form.collection.vars.id }}").change();
			
			$("#{{ form.poeticform.vars.id }}").change(function()
			{
				$.ajax({
					type: "POST",
					url: "{{ path('select_poeticform') }}",
					data: { "id" : $(this).val() },
					success: function(data)
					{
						if(data.typeContentPoem == "{{ constant('Poeticus\\Entity\\PoeticForm::IMAGETYPE') }}") {
							$("#text_container").hide();
							$("#photo_container").show();
						}
						else {
							$("#text_container").show();
							$("#photo_container").hide();
						}
					}
				});
			});
			
			$("#{{ form.poeticform.vars.id }}").change();
			
			$("select#{{ form.language.vars.id }}").change(function() {
				var input = $(".container_{{ form.vars['id'] }}_biography > .input-group > input[type='hidden']");
				$(input[0]).addClass('combobox full_width form-control').attr("type", "text").val("");
				$(".container_{{ form.vars['id'] }}_biography").parent().append(input[0]);
				$(".container_{{ form.vars['id'] }}_biography").remove();
				setComboboxNew('{{ path("poemadmin_getbiographiesbyajax") }}?locale=' + $(this).val(), 'biography', "#{{ form.vars['id'] }}_biography");
			
				$.ajax({
					type: "GET",
					url: "{{ path('get_poeticforms_by_language') }}",
					data: { "locale" : $(this).val() },
					success: function(data)
					{
						$("select#{{ form.poeticform.vars.id }}").empty();
						$("select#{{ form.poeticform.vars.id }}").append('<option value="" selected="selected">{{ 'main.field.ChooseAnOption'|trans }}</option>');
						
						for (var i = 0; i < data.length; i++) {
							$("select#{{ form.poeticform.vars.id }}").append('<option value="'+ data[i].id +'">'+ data[i].name +'</option>');
						}
					}
				});
			});
			
			$("select#{{ form.language.vars.id }}").change();
		});
	</script>
{% endblock %}

{% block main_content %}
{% form_theme form 'Form/fields.html.twig' %}

{{ form_start(form, {'method' : 'post', 'action' : path('poemadmin_create'), 'attr': {'novalidate': 'novalidate'} }) }}
	<table class="form_grid">
		<tr>
			<th>{{ form_label(form.title) }}</th>
			<td><div class="errors">{{ form_errors(form.title) }}</div>{{ form_widget(form.title, {'attr':{'class':'full_width form-control'}}) }}</td>
		</tr>
		<tr>
			<th>{{ form_label(form.language) }}</th>
			<td><div class="errors">{{ form_errors(form.language) }}</div>{{ form_widget(form.language, {'attr':{'class':'full_width form-control'}}) }}</td>
		</tr>
		<tr>
			<th>{{ form_label(form.poeticform) }}</th>
			<td><div class="errors">{{ form_errors(form.poeticform) }}</div>{{ form_widget(form.poeticform, {'attr':{'class':'full_width form-control'}}) }}</td>
		</tr>
		<tr id="photo_container">
			<th>{{ form_label(form.photo) }}</th>
			<td><div class="errors">{{ form_errors(form.photo) }}</div>{{ form_widget(form.photo) }}</td>
		</tr>
		<tr id="text_container">
			<th>{{ form_label(form.text) }}</th>
			<td><div class="errors">{{ form_errors(form.text) }}</div>{{ form_widget(form.text, { 'attr' : { 'class' : 'text form-control' }}) }}</td>
		</tr>
		<tr>
			<th>{{ form_label(form.authorType) }}</th>
			<td><div class="errors">{{ form_errors(form.authorType) }}</div>{{ form_widget(form.authorType, {'attr':{'class':'full_width form-control'}}) }}</td>
		</tr>
		<tr class="user_row">
			<th>{{ form_label(form.user) }}</th>
			<td><div class="errors">{{ form_errors(form.user) }}</div>{{ form_widget(form.user, {'attr':{'class':'full_width form-control'}}) }}</td>
		</tr>
		<tr class="biography_row">
			<th>{{ form_label(form.biography) }}</th>
			<td><div class="errors">{{ form_errors(form.biography) }}</div>{{ form_widget(form.biography, {'attr':{'class':'full_width combobox'}}) }}</td>
		</tr>
		<tr>
			<th>{{ 'admin.poem.Country'|trans }}</th>
			<td class="poem-country">-</td>
		</tr>
		<tr>
			<th>{{ form_label(form.collection) }}</th>
			<td><div class="errors">{{ form_errors(form.collection) }}</div>{{ form_widget(form.collection, {'attr':{'class':'full_width form-control'}}) }}</td>
		</tr>
		<tr>
			<th>{{ form_label(form.releasedDate) }}</th>
			<td><div class="errors">{{ form_errors(form.releasedDate) }}</div>{{ form_widget(form.releasedDate, {'attr':{'class':'year form-control'}}) }} {{ form_widget(form.unknownReleasedDate) }} {{ form_label(form.unknownReleasedDate) }}</td>
		</tr>
	</table>
	<hr />
	{{ form_widget(form.save, {'icon': 'fa-save'}) }}
	{{ form_rest(form) }}
{{ form_end(form) }}

{% endblock %}